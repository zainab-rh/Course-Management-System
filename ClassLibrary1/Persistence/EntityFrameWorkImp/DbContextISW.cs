using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.Entity;
using System.Reflection;

namespace GestAca.Persistence
{
    public abstract class DbContextISW : DbContext
    {

        public DbContextISW(String s) : base(s) { }

        /// <summary>
        /// Delete every object stored in the DbSets
        /// Every class in the Namespace "...Entities" must have a DbSet in the DbContext
        /// </summary>
        public virtual void RemoveAllData()
        {
            foreach (Type t in Assembly.GetExecutingAssembly().GetTypes())
                if (t.FullName.Contains(".Entities"))
                    if (t.BaseType.FullName != "System.Enum") // NOT ALL TYPES HAVE A DBSET
//                        if (!t.Name.StartsWith("<>c_"))  // CLASSES AUTOGENERATED BY EF
                         if (!t.IsNested)  // CLASSES AUTOGENERATED BY EF
                                Set(t).RemoveRange(Set(t));

            SaveChanges();
        }

        /// <summary>
        /// Un-done every change made since last SaveChanges()
        /// </summary>
        public void Rollback()
        {
            // Copiado de: https://www.iteramos.com/pregunta/40487/deshacer-los-cambios-realizados-en-el-marco-de-entidades-de-entidades
            var context = this;
            var changedEntries = context.ChangeTracker.Entries().Where(x => x.State != EntityState.Unchanged).ToList();
            foreach (var entry in changedEntries.Where(x => x.State == EntityState.Modified))
            {
                entry.CurrentValues.SetValues(entry.OriginalValues);
                entry.State = EntityState.Unchanged;
            }
            foreach (var entry in changedEntries.Where(x => x.State == EntityState.Added))
            {
                entry.State = EntityState.Detached;
            }
            foreach (var entry in changedEntries.Where(x => x.State == EntityState.Deleted))
            {
                entry.State = EntityState.Unchanged;
            }
        }


    }
}
